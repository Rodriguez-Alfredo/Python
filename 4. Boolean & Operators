valid = True
not_valid = False

print(valid)
print(not_valid)

#Comparing if value is true or false in the variable
print(valid == True)
print(not_valid == True)

print(valid != True)
print(not_valid != True)

#use 'not' as a replacment for the code ontop
print(not valid)
print(not not_valid)

print( 10 < 9) == True
print((10 ==10) == True)
print((10 != 10) == True)
print((10 >= 10) == True)
print((10 <= 10) == True)
print ((10 > 9) == True)


print('-----')

#both need to be true for the output to be True using 'and' function
print(10 > 5 and 10 < 5)
#only needs one to be true to output True using 'or' function
print(10 > 5 or 10 < 5)

#true numerical output is '1'
#false numerical output is '0'
print(bool(0))
print(bool(1))

print(bool(0) == False)
print(bool(1) == True)

print(10 + 10)
print(10 - 10)
print(10 /10 )
print(10 // 10)

print(10 / 3 )
print(10 // 3)
print(10 % 3)

print(10 * 10)
print (10 ** 10)
print(10 % 10)

#shorten expressions '+='
x = 10
print(x)
x = x + 1
print(x)
x += 1
print(x)
x -= 1
print(x)
x *= 5
print(x)
x /= 5
print(x)

x = 13
#binary output
print(bin(x))
#remove first 2 values from the output
print(bin(x) [2:].rjust(4, '0') )

y = 5
print(bin(y)[2:].rjust(4, '0'))

print(bin(x & y)[2:].rjust(4,'0'))
print(x & y)

#shift binary output values
print(bin(x >> 1)[2:].rjust(4,'0'))
print(bin(x << 2)[2:].rjust(4,'0'))